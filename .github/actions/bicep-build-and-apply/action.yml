name: "bicep-build-and-apply"

inputs:
  environmentName:
    description: "The name of the environment e.g. dev, prd"
    required: true
  AZURE_CLIENT_ID:
    description: "The azure client/application ID configured for federated access"
    required: true
    type: string
  AZURE_DEPLOY_SCRIPT_IDENTITY:
    description: "The user assigned identity to execute the deployment scripts under"
    required: true
    type: string
  AZURE_TENANT_ID:
    description: "The target Azure tenant"
    required: true
    type: string
  AZURE_SUBSCRIPTION_ID:
    description: "The target Azure subscription"
    required: true
    type: string

runs:
  using: "composite"

  steps:
    - uses: actions/checkout@v4

    - name: Az CLI Login
      uses: azure/login@v1
      with:
        client-id: ${{ inputs.AZURE_CLIENT_ID }}
        tenant-id: ${{ inputs.AZURE_TENANT_ID }}
        subscription-id: ${{ inputs.AZURE_SUBSCRIPTION_ID }}

    - name: Build Bicep
      shell: bash
      run: |
        az bicep build --file bicep/main.bicep --stdout

    - name: Validate Bicep
      shell: pwsh
      run: |
        $config = (Get-Content params/${{ inputs.environmentName }}.json | ConvertFrom-Json)

        az deployment sub validate `
          --name "portal-servers-integration-$($config.parameters.parEnvironment.value)-$($config.parameters.parInstance.value)" `
          --location $config.parameters.parLocation.value `
          --template-file bicep/main.bicep `
          --parameters @params/$($config.parameters.parEnvironment.value).json `
          parScriptIdentity=${{ inputs.AZURE_DEPLOY_SCRIPT_IDENTITY }}

    - name: WhatIf Bicep
      shell: pwsh
      run: |
        $config = (Get-Content params/${{ inputs.environmentName }}.json | ConvertFrom-Json)

        az deployment sub what-if `
          --name "portal-servers-integration-$($config.parameters.parEnvironment.value)-$($config.parameters.parInstance.value)" `
          --location $config.parameters.parLocation.value `
          --template-file bicep/main.bicep `
          --parameters @params/$($config.parameters.parEnvironment.value).json `
          parScriptIdentity=${{ inputs.AZURE_DEPLOY_SCRIPT_IDENTITY }}

    - name: Deploy Bicep
      shell: pwsh
      run: |
        $config = (Get-Content params/${{ inputs.environmentName }}.json | ConvertFrom-Json)

        $deletedKeyVaults = az keyvault list-deleted --query '[].properties.vaultId' | ConvertFrom-Json
        $isDeleted = $deletedKeyVaults | where {$_ -match "rg-portal-servers-integration-$($config.parameters.parEnvironment.value)-$($config.parameters.parLocation.value)-$($config.parameters.parInstance.value)"}

        $keyVaultCreateMode = "default"
        if ($isDeleted -ne $null) {
          # To allow the development environment to be torn-down and re-created, the Key Vault Create Mode must be set to 'recover'.
          $keyVaultCreateMode = "recover"
        }

        az deployment sub create `
          --name "portal-servers-integration-$($config.parameters.parEnvironment.value)-$($config.parameters.parInstance.value)" `
          --location $config.parameters.parLocation.value `
          --template-file bicep/main.bicep `
          --parameters @params/$($config.parameters.parEnvironment.value).json `
          parKeyVaultCreateMode=$keyVaultCreateMode `
          parScriptIdentity=${{ inputs.AZURE_DEPLOY_SCRIPT_IDENTITY }}

    - name: AAD Scripts
      shell: pwsh
      run: |
        $config = (Get-Content params/${{ inputs.environmentName }}.json | ConvertFrom-Json)

        $deploymentOutput = (az deployment sub show --name "portal-servers-integration-$($config.parameters.parEnvironment.value)-$($config.parameters.parInstance.value)" `
          --subscription ${{ inputs.AZURE_SUBSCRIPTION_ID }}) | ConvertFrom-Json

        $repositoryApiName = $config.parameters.parRepositoryApi.value.ApplicationName
        $repositoryApiId = (az ad app list --filter "displayName eq '$repositoryApiName'" --query '[].appId') | ConvertFrom-Json
        $resourceId = (az ad sp list --filter "appId eq '$repositoryApiId'" --query '[0].id') | ConvertFrom-Json
        $repositoryApiSpn = (az rest -m GET -u https://graph.microsoft.com/v1.0/servicePrincipals/$resourceId) | ConvertFrom-Json
        $appRoleId = ($repositoryApiSpn.appRoles | Where-Object { $_.displayName -eq "ServiceAccount" }).id

        $principalId = $deploymentOutput.properties.outputs.principalId.value
        . "scripts/GrantPrincipalAppRole.ps1" -principalId $principalId -resourceId $resourceId -appRoleId $appRoleId

    - name: Integration Tests AAD Scripts
      shell: pwsh
      run: |
        $config = (Get-Content params/${{ inputs.environmentName }}.json | ConvertFrom-Json)

        $keyVaultName = az deployment sub show --name "portal-servers-integration-$($config.parameters.parEnvironment.value)-$($config.parameters.parInstance.value)" `
          --subscription ${{ inputs.AZURE_SUBSCRIPTION_ID }} --query properties.outputs.keyVaultName.value

        . scripts/CreateAppRegistration.ps1 -applicationName "portal-servers-integration-$($config.parameters.parEnvironment.value)-$($config.parameters.parInstance.value)-integration-tests"

        . scripts/CreateAppRegistrationCredential.ps1 -keyVaultName $keyVaultName `
          -applicationName "portal-servers-integration-$($config.parameters.parEnvironment.value)-$($config.parameters.parInstance.value)-integration-tests" `
          -secretPrefix "portal-servers-integration-$($config.parameters.parEnvironment.value)-$($config.parameters.parInstance.value)-integration-tests" `
          -secretDisplayName "portalserversintegrationtests"

        $repositoryApiName = $config.parameters.parRepositoryApi.value.ApplicationName
        $repositoryApiId = (az ad app list --filter "displayName eq '$repositoryApiName'" --query '[].appId') | ConvertFrom-Json
        $resourceId = (az ad sp list --filter "appId eq '$repositoryApiId'" --query '[0].id') | ConvertFrom-Json
        $repositoryApiSpn = (az rest -m GET -u https://graph.microsoft.com/v1.0/servicePrincipals/$resourceId) | ConvertFrom-Json
        $appRoleId = ($repositoryApiSpn.appRoles | Where-Object { $_.displayName -eq "ServiceAccount" }).id

        $testAppIdentifier = "api://portal-servers-integration-$($config.parameters.parEnvironment.value)-$($config.parameters.parInstance.value)-integration-tests"
        $testApp = az ad sp show --id $testAppIdentifier | ConvertFrom-Json
        $principalId = $testApp.id

        . "scripts/GrantPrincipalAppRole.ps1" -principalId $principalId -resourceId $resourceId -appRoleId $appRoleId