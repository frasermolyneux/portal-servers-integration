name: "bicep-build-and-apply"

inputs:
  environmentName:
    description: "The name of the environment e.g. dev, prd"
    required: true
  AZURE_CLIENT_ID:
    description: "The azure client/application ID configured for federated access"
    required: true
    type: string
  AZURE_DEPLOY_SCRIPT_IDENTITY:
    description: "The user assigned identity to execute the deployment scripts under"
    required: true
    type: string
  AZURE_TENANT_ID:
    description: "The target Azure tenant"
    required: true
    type: string
  AZURE_SUBSCRIPTION_ID:
    description: "The target Azure subscription"
    required: true
    type: string

runs:
  using: "composite"

  steps:
    - uses: actions/checkout@v4

    - name: Az CLI Login
      uses: azure/login@v2
      with:
        client-id: ${{ inputs.AZURE_CLIENT_ID }}
        tenant-id: ${{ inputs.AZURE_TENANT_ID }}
        subscription-id: ${{ inputs.AZURE_SUBSCRIPTION_ID }}

    - name: Build Bicep
      shell: bash
      run: |
        az bicep build --file bicep/main.bicep --stdout

    - name: Validate Bicep
      shell: pwsh
      run: |
        $config = (Get-Content params/${{ inputs.environmentName }}.json | ConvertFrom-Json)

        az deployment sub validate `
          --name "portal-servers-integration-$($config.parameters.parEnvironment.value)-$($config.parameters.parInstance.value)" `
          --location $config.parameters.parLocation.value `
          --template-file bicep/main.bicep `
          --parameters @params/$($config.parameters.parEnvironment.value).json `
          parScriptIdentity=${{ inputs.AZURE_DEPLOY_SCRIPT_IDENTITY }}

    - name: WhatIf Bicep
      shell: pwsh
      run: |
        $config = (Get-Content params/${{ inputs.environmentName }}.json | ConvertFrom-Json)

        az deployment sub what-if `
          --name "portal-servers-integration-$($config.parameters.parEnvironment.value)-$($config.parameters.parInstance.value)" `
          --location $config.parameters.parLocation.value `
          --template-file bicep/main.bicep `
          --parameters @params/$($config.parameters.parEnvironment.value).json `
          parScriptIdentity=${{ inputs.AZURE_DEPLOY_SCRIPT_IDENTITY }}

    - name: Deploy Bicep
      shell: pwsh
      run: |
        $config = (Get-Content params/${{ inputs.environmentName }}.json | ConvertFrom-Json)

        $deletedKeyVaults = az keyvault list-deleted --query '[].properties.vaultId' | ConvertFrom-Json
        $isDeleted = $deletedKeyVaults | where {$_ -match "rg-portal-servers-integration-$($config.parameters.parEnvironment.value)-$($config.parameters.parLocation.value)-$($config.parameters.parInstance.value)"}

        $keyVaultCreateMode = "default"
        if ($isDeleted -ne $null) {
          # To allow the development environment to be torn-down and re-created, the Key Vault Create Mode must be set to 'recover'.
          $keyVaultCreateMode = "recover"
        }

        az deployment sub create `
          --name "portal-servers-integration-$($config.parameters.parEnvironment.value)-$($config.parameters.parInstance.value)" `
          --location $config.parameters.parLocation.value `
          --template-file bicep/main.bicep `
          --parameters @params/$($config.parameters.parEnvironment.value).json `
          parKeyVaultCreateMode=$keyVaultCreateMode `
          parScriptIdentity=${{ inputs.AZURE_DEPLOY_SCRIPT_IDENTITY }}
